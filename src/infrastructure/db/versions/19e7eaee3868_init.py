"""init

Revision ID: 19e7eaee3868
Revises:
Create Date: 2024-10-13 19:23:23.967434

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utils.types.email

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "19e7eaee3868"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "inventory",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("unit", sa.String(length=50), nullable=False),
        sa.Column("stock_count", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "promotion",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("code", sa.String(length=15), nullable=False),
        sa.Column("sale", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), server_default="f", nullable=False),
        sa.Column("day_start", sa.Date(), nullable=False),
        sa.Column("day_end", sa.Date(), nullable=False),
        sa.CheckConstraint("sale > 0 AND sale < 100", name="check_sale_percent"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "service",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.CheckConstraint("price >= 0", name="check_count_positive"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("email", sqlalchemy_utils.types.email.EmailType(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("telephone", sa.String(), nullable=False),
        sa.Column("date_birthday", sa.Date(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("is_active", sa.Boolean(), server_default="t", nullable=False),
        sa.Column("is_superuser", sa.Boolean(), server_default="f", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("telephone"),
    )
    op.create_table(
        "consumable",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("inventory_id", sa.BigInteger(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.CheckConstraint("count >= 0", name="check_count_positive"),
        sa.ForeignKeyConstraint(["inventory_id"], ["inventory.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "master",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "promotion_to_service",
        sa.Column("promotion_id", sa.BigInteger(), nullable=False),
        sa.Column("service_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["promotion_id"], ["promotion.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["service.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("promotion_id", "service_id"),
    )
    op.create_table(
        "user_point",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.CheckConstraint("count >= 0", name="check_count_positive"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "consumable_to_inventory",
        sa.Column("consumable_id", sa.BigInteger(), nullable=False),
        sa.Column("service_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["consumable_id"], ["consumable.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["service.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("consumable_id", "service_id"),
    )
    op.create_table(
        "schedule",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("day", sa.Date(), nullable=False),
        sa.Column("master_id", sa.BigInteger(), nullable=False),
        sa.Column("service_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["master_id"], ["master.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["service.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("day", "master_id", "service_id"),
    )
    op.create_table(
        "service_to_master",
        sa.Column("master_id", sa.BigInteger(), nullable=False),
        sa.Column("service_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["master_id"], ["master.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["service.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("master_id", "service_id"),
    )
    op.create_table(
        "slot",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("time_start", sa.Time(), nullable=False),
        sa.Column("time_end", sa.Time(), nullable=True),
        sa.Column("schedule_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["schedule_id"], ["schedule.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("schedule_id", "time_start"),
    )
    op.create_table(
        "order",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("slot_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("point_uses", sa.Integer(), nullable=False),
        sa.Column("promotion_sale", sa.Integer(), nullable=False),
        sa.Column("total_amount", sa.Integer(), nullable=False),
        sa.Column("date_add", sa.Date(), nullable=False),
        sa.CheckConstraint("point_uses >= 0", name="check_point_uses_positive"),
        sa.CheckConstraint("promotion_sale >= 0", name="check_promotion_sale_positive"),
        sa.CheckConstraint("total_amount >= 0", name="check_total_amount_positive"),
        sa.ForeignKeyConstraint(["slot_id"], ["slot.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slot_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order")
    op.drop_table("slot")
    op.drop_table("service_to_master")
    op.drop_table("schedule")
    op.drop_table("consumable_to_inventory")
    op.drop_table("user_point")
    op.drop_table("promotion_to_service")
    op.drop_table("master")
    op.drop_table("consumable")
    op.drop_table("users")
    op.drop_table("service")
    op.drop_table("promotion")
    op.drop_table("inventory")
    # ### end Alembic commands ###
